// ===== 1. Config =====
const BOT_TOKEN = "";
const WEBAPP_URL = "";
const OPENAI_API_KEY="";
const OPENAI_WHISPER_URL = "https://api.openai.com/v1/audio/transcriptions";
const DAILY_VOICE_LIMIT = 3;
const MAX_VOICE_DURATION = 300;
const SHEET_ID = "";
const SUBMISSIONS_SHEET_NAME = "Submissions";
const RESUME_SHEET_NAME = "Resumes";
const VACANCY_SHEET_NAME = "Vacancies";
const ALLOWED_USERS = [...];


const Bot = TGbot.bot({
  botToken: BOT_TOKEN,
  webAppUrl: WEBAPP_URL,
  logRequest: true,   // –º–æ–∂–Ω–æ true, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã
  parseMode: "HTML"    // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "HTML"
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Webhook
function setWebhook(){
  Bot.setWebhook({
    url: WEBAPP_URL,
    drop_pending_updates: true
  });
}

function doPost(e) {
  if (!e?.postData?.contents) return ContentService.createTextOutput("ok");
  
  const contents = JSON.parse(e.postData.contents);

  if (contents.callback_query) {
    handleCallbackQuery(contents);
  }

  if (contents.message) {
    const msg = contents.message;
    const chatId = msg.chat.id;

    if (msg.voice) {
      const duration = msg.voice.duration || 0;
      if (duration > MAX_VOICE_DURATION) {
        Bot.sendMessage({
          chat_id: chatId,
          text:
            "‚è≥ –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∞—É–¥–∏–æ! –†–∞–∑—Ä–µ—à–µ–Ω–æ –º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç, –∞ —É –≤–∞—Å " +
            (duration / 60).toFixed(1) +
            " –º–∏–Ω."
        });
        return;
      }

      Bot.sendMessage({ chat_id: chatId, text: "üéô –ì–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..." });
      const fileId = msg.voice.file_id;
      const fileObj = Bot.getFile(fileId);
      const response = UrlFetchApp.fetch(fileObj, { muteHttpExceptions: true });
      if (response.getResponseCode() !== 200) {
        Bot.sendMessage({ chat_id: chatId, text: "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞." });
        return;
      }

      const voiceBlob = response.getBlob().setName("voice.ogg");
      const transcriptionText = sendToWhisper(voiceBlob, chatId);
      Logger.log("üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: " + transcriptionText);

      const sessionType = PropertiesService.getScriptProperties().getProperty("SESSION_TYPE_" + chatId);
      SESSION_TYPE[chatId] = sessionType;
      Logger.log("üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π SESSION_TYPE: " + sessionType);

      if (transcriptionText) {
        registerUserIfNeeded(chatId);

        if (sessionType === "resume") {
          appendTranscript(chatId, RESUME_SHEET_NAME, "resume", transcriptionText);
          notifyCandidateSaved(chatId);
        } else if (sessionType === "vacancy") {
          appendTranscript(chatId, VACANCY_SHEET_NAME, "vacancy", transcriptionText);
          Utilities.sleep(300);
          const matchList = FindMatches(transcriptionText, chatId);
          Utilities.sleep(300);
          const matchMsg = printMatches(matchList);
          Bot.sendMessage({ chat_id: chatId, text: matchMsg });
          sendFollowUpMenu(chatId);
        } else {
          Bot.sendMessage({
            chat_id: chatId,
            text:
              "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç (—Ä–µ–∑—é–º–µ –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è)."
          });
        }
      } else {
        Bot.sendMessage({ chat_id: chatId, text: "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∞—É–¥–∏–æ." });
      }
    } else if (msg.text) {
      const text = msg.text.toLowerCase();
      if (text === "/start") {
        SESSION_TYPE[chatId] = null;
        PropertiesService.getScriptProperties().deleteProperty("SESSION_TYPE_" + chatId);
        sendMenu(chatId);
      } else if (text === "/help") {
        Bot.sendMessage({
          chat_id: chatId,
          text:
            "‚ùì –ü–æ–º–æ—â—å:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—é–º–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏."
        });
      } else if (text === "/about") {
        Bot.sendMessage({
          chat_id: chatId,
          text:
            "‚ÑπÔ∏è –û –±–æ—Ç–µ:\n\n–≠—Ç–æ—Ç –±–æ—Ç –∏—â–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
        });
      } else {
        Bot.sendMessage({
          chat_id: chatId,
          text: "ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        });
      }
    }
  }
  //return ContentService.createTextOutput("ok");
}

/*************************************************************************************** 
 * BOT MENUE
*/
const SESSION_TYPE = {}; // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

/*** –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏***/
function sendMenu(chatId) {
  Bot.sendMessage({
    chat_id: chatId,
    text: "üéô –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–ª–∏ —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ", callback_data: "send_resume" },
          { text: "üìù –û–ø–∏—Å–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data: "describe_vacancy" },
          { text: "–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—é–º–µ/–≤–∞–∫–∞–Ω—Å–∏—é", callback_data: "delete_smth"}
        ]
      ]
    }
  });
}

/*** –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∫–Ω–æ–ø–∫–∏ –∏–∑ –º–µ–Ω—é***/
function handleCallbackQuery(contents) {
  if (contents.callback_query) {
    const cq = contents.callback_query;
    const data = cq.data; 
    const chatId = cq.message.chat.id;

    if (data === "send_resume") {
      SESSION_TYPE[chatId] = "resume";
      PropertiesService.getScriptProperties().setProperty(`SESSION_TYPE_${chatId}`, "resume");

      Bot.sendMessage({
        chat_id: chatId,
        text: `üéô –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å –≤–∞—à–∏–º —Ä–µ–∑—é–º–µ (—Å—Ç—Ä–æ–≥–æ –Ω–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç). –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ–∑—é–º–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ.`
      });

    } else if (data === "describe_vacancy") {
      SESSION_TYPE[chatId] = "vacancy";
      PropertiesService.getScriptProperties().setProperty(`SESSION_TYPE_${chatId}`, "vacancy");

      Bot.sendMessage({
        chat_id: chatId,
        text: `üìù –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ (—Å—Ç—Ä–æ–≥–æ –Ω–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç). –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∫–∞–Ω—Å–∏–π`
      });
    }
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */
function sendFollowUpMenu(chatId) {
  Bot.sendMessage({
    chat_id: chatId,
    text: "üîÑ –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ", callback_data: "send_resume" },
          { text: "üìù –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data: "describe_vacancy" }
        ]
      ]
    }
  });
}

/**
 * –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ä–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
 */
function notifyCandidateSaved(chatId) {
  Bot.sendMessage({
    chat_id: chatId,
    text: "‚úÖ –í–∞—à–µ —Ä–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!"
  });

  sendFollowUpMenu(chatId);
}

/**
 * –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –≤–∞–∫–∞–Ω—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ —Å–∫–æ–ª—å–∫–æ –∏—Ö —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ
 */
function notifyVacancySaved(chatId, vacancyCount) {
  Bot.sendMessage({
    chat_id: chatId,
    text: `‚úÖ –í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞! –°–µ–π—á–∞—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É –≤–∞—Å ${vacancyCount} –≤–∞–∫–∞–Ω—Å–∏–π.`
  });

  sendFollowUpMenu(chatId);
}

/**************************************************************************
 * –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
 * –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
 *   1. FindMatches
 *   2. printMatches
 *   3. registerUserIfNeeded
 *   4. updateResume
 *   5. appendTranscript
 *
 * –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ SHEET_ID —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω—É–∂–Ω—É—é Google —Ç–∞–±–ª–∏—Ü—É,
 * –∞ —Ç–∞–∫–∂–µ —á—Ç–æ –ª–∏—Å—Ç—ã "Users", SUBMISSIONS_SHEET_NAME (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Submissions") –∏ "Resume"
 * —Å—É—â–µ—Å—Ç–≤—É—é—Ç (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äì —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–¥—É—Ç –∏—Ö –∏–ª–∏ –æ—á–∏—Å—Ç—è—Ç).
 *
 **************************************************************************/

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è FindMatches.
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ç–µ—Å—Ç–æ–≤—ã–π userId, –≤—ã–∑—ã–≤–∞–µ—Ç FindMatches –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
 */
function TestFindMatches() {
  var vacancyText = "–í–∞–∫–∞–Ω—Å–∏—è: –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç";
  var testUserId = "99999"; // —Ç–µ—Å—Ç–æ–≤—ã–π userId
  // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ FindMatches (callGPT –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ)
  var matches = FindMatches(vacancyText, testUserId);
  Logger.log("TestFindMatches: –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: " + JSON.stringify(matches));
}


/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è printMatches.
 * –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ª–∏—Å—Ç—ã "Resume" –∏ "Users" —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç printMatches —Å —Ç–µ—Å—Ç–æ–≤—ã–º –º–∞—Å—Å–∏–≤–æ–º.
 */
function TestPrintMatches() {
  var ss = SpreadsheetApp.openById(SHEET_ID);
  
  var testMatchList = ["12345", "67890", "11111"];
  var result = printMatches(testMatchList);
  Logger.log("TestPrintMatches: –†–µ–∑—É–ª—å—Ç–∞—Ç:\n" + result);
}



/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è appendTranscript.
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. –†–µ–∑—é–º–µ: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞, –∑–∞—Ç–µ–º –ø–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥—É–±–ª–∏–∫–∞—Ç—ã –∏—Å–∫–ª—é—á–µ–Ω—ã).
 * 2. –í–∞–∫–∞–Ω—Å–∏–∏: –¥–≤–∞ –≤—ã–∑–æ–≤–∞ ‚Äî –æ–±–∞ –¥–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏.
 * 3. –í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è testChatId.
 */
function TestAppendTranscript() {
    const testChatId = "22222";
    const testChatId2 = "55555";
    const ss = SpreadsheetApp.openById(SHEET_ID);
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    // clearTestData(ss, testChatId);
    // clearTestData(ss, testChatId2);

    Logger.log("=== –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è appendTranscript ===");

    // –¢–µ—Å—Ç 1: –†–µ–∑—é–º–µ
    Logger.log("–î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—é–º–µ...");
    appendTranscript(testChatId, RESUME_SHEET_NAME, "resume", "–ü–µ—Ä–≤–æ–µ —Ä–µ–∑—é–º–µ");
    appendTranscript(testChatId, RESUME_SHEET_NAME, "resume", "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ"); // –î–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
    appendTranscript(testChatId, RESUME_SHEET_NAME, "resume", ""); // –î–æ–ª–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ä–µ–∑—é–º–µ
    appendTranscript(testChatId, RESUME_SHEET_NAME, "resume", "–ù–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è"); // –î–æ–ª–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å

    // –¢–µ—Å—Ç 2: –í–∞–∫–∞–Ω—Å–∏–∏ (—Ä–∞–∑–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
    Logger.log("–î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏...");
    appendTranscript(testChatId, VACANCY_SHEET_NAME, "vacancy", "–í–∞–∫–∞–Ω—Å–∏—è 1 –¥–ª—è 22222");
    appendTranscript(testChatId2, VACANCY_SHEET_NAME, "vacancy", "–í–∞–∫–∞–Ω—Å–∏—è 1 –¥–ª—è 55555");
    appendTranscript(testChatId, VACANCY_SHEET_NAME, "vacancy", "–í–∞–∫–∞–Ω—Å–∏—è 2 –¥–ª—è 22222"); // –î–æ–ª–∂–Ω–æ –∏–¥—Ç–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π
    appendTranscript(testChatId2, VACANCY_SHEET_NAME, "vacancy", "–í–∞–∫–∞–Ω—Å–∏—è 2 –¥–ª—è 55555");
    appendTranscript(testChatId, VACANCY_SHEET_NAME, "vacancy", "–í–∞–∫–∞–Ω—Å–∏—è 3 –¥–ª—è 22222"); // –î–æ–ª–∂–Ω–æ –≤—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π

    Logger.log("TestAppendTranscript: –í–∞–∫–∞–Ω—Å–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è " + testChatId + " –∏ " + testChatId2);

    // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    logSheetData(ss, RESUME_SHEET_NAME, testChatId, "–†–µ–∑—é–º–µ");
    logSheetData(ss, VACANCY_SHEET_NAME, testChatId, "–í–∞–∫–∞–Ω—Å–∏–∏");
    logSheetData(ss, VACANCY_SHEET_NAME, testChatId2, "–í–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

    Logger.log("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===");
}

/**
 * –û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è testChatId –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö "Resumes" –∏ "Vacancies".
 * 
 * @param {Spreadsheet} ss - –û—Ç–∫—Ä—ã—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞.
 * @param {string} chatId - –¢–µ—Å—Ç–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
function clearTestData(ss, chatId) {
  const sheets = [RESUME_SHEET_NAME, VACANCY_SHEET_NAME];
  
  sheets.forEach(sheetName => {
    const sheet = ss.getSheetByName(sheetName);
    if (!sheet) return;
    
    const data = sheet.getDataRange().getValues();
    for (let i = data.length - 1; i > 0; i--) {
      if (String(data[i][0]) === String(chatId)) {
        sheet.deleteRow(i + 1); // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ testChatId
      }
    }
  });

  Logger.log(`TestAppendTranscript: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è chatId=${chatId} —É–¥–∞–ª–µ–Ω—ã.`);
}

/**
 * –í—ã–≤–æ–¥–∏—Ç –≤ –ª–æ–≥ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –¥–ª—è testChatId.
 *
 * @param {Spreadsheet} ss - –û—Ç–∫—Ä—ã—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞.
 * @param {string} sheetName - –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞.
 * @param {string} chatId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {string} entity - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–†–µ–∑—é–º–µ" –∏–ª–∏ "–í–∞–∫–∞–Ω—Å–∏–∏").
 */
function logSheetData(ss, sheetName, chatId, entity) {
  const sheet = ss.getSheetByName(sheetName);
  if (!sheet) return;
  
  const data = sheet.getDataRange().getValues();
  Logger.log(`=== ${entity} –¥–ª—è chatId=${chatId} ===`);
  
  data.forEach(row => {
    if (String(row[0]) === String(chatId)) {
      Logger.log(JSON.stringify(row));
    }
  });
}


/////////
/**
 * –§—É–Ω–∫—Ü–∏—è callGPT(prompt)
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI API –¥–ª—è –º–æ–¥–µ–ª–∏ GPT‚Äë4o —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ø—Ä–æ–º—Ç–æ–º.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç UrlFetchApp –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è POST‚Äë–∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤).
 *
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
 * - –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç.
 * - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ API (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏).
 * - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ.
 *
 * @param {string} prompt ‚Äì –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è GPT.
 * @return {string} ‚Äì –û—Ç–≤–µ—Ç GPT (—Ç–µ–∫—Å—Ç), –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
 */
function callGPT(prompt) {
  try {
    const url = "https://api.openai.com/v1/chat/completions";
    const payload = {
      model: "gpt-4o",            // Updated to GPT-4o
      messages: [{ role: "user", content: prompt }],
      temperature: 1,             // Maximum creativity, allows diverse candidate selection
      max_tokens: 600,            // Ensures full understanding of resumes, but short response
      top_p: 1,                   // No restrictions on token probability
      frequency_penalty: 0,       // No penalty for repeating user IDs
      presence_penalty: 0         // No penalty for including valid IDs
    };
    const options = {
      method: "post",
      contentType: "application/json",
      headers: { "Authorization": "Bearer " + OPENAI_API_KEY },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    };

    Logger.log("GPT Request: " + JSON.stringify(payload));

    const response = UrlFetchApp.fetch(url, options);
    const responseCode = response.getResponseCode();

    if (responseCode >= 200 && responseCode < 300) {
      const json = JSON.parse(response.getContentText());
      const gptResponse = json.choices[0].message.content.trim();
      
      Logger.log("GPT Response: " + gptResponse);
      return gptResponse;
    } else {
      Logger.log("GPT API Error: " + responseCode + " - " + response.getContentText());
      return "";
    }
  } catch (error) {
    Logger.log("callGPT Exception: " + error.toString());
    return "";
  }
}


/**
 * –§—É–Ω–∫—Ü–∏—è TestCallGPT()
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É callGPT() —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç.
 */
function TestCallGPT() {
  const testPrompt = "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?";
 // Logger.log("Testing callGPT with prompt: " + testPrompt);
  
  const response = callGPT(testPrompt);
  
  //Logger.log("TestCallGPT Response: " + response);
}



/**
 * –§—É–Ω–∫—Ü–∏—è appendTranscript(chatId, sheetName, appendType, transcriptionText)
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ª–∏—Å—Ç Google Sheets.
 * 
 * - –ï—Å–ª–∏ appendType —Ä–∞–≤–µ–Ω "resume", —Ç–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å:
 *   - –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è (—Ç–µ–∫—Å—Ç –≤ –∫–æ–ª–æ–Ω–∫–µ B, –¥–∞—Ç–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ D).
 *   - –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞.
 * 
 * - –ï—Å–ª–∏ appendType —Ä–∞–≤–µ–Ω "vacancy":
 *   - –°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å (–∫–æ–ª–æ–Ω–∫–∏ A, B, D).
 *   - –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å —ç—Ç–∏–º chatId —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å—á–µ—Ç—á–∏–∫ –≤–∞–∫–∞–Ω—Å–∏–π (–∫–æ–ª–æ–Ω–∫–∞ C) –Ω–∞ 1.
 *
 * @param {string|number} chatId ‚Äì –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {string} sheetName ‚Äì –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –≤ Google Sheets, –∫—É–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø–∏—Å—å.
 * @param {string} appendType ‚Äì –¢–∏–ø –∑–∞–ø–∏—Å–∏: "resume" –∏–ª–∏ "vacancy".
 * @param {string} transcriptionText ‚Äì –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
 */
function appendTranscript(chatId, sheetName, appendType, transcriptionText) {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(sheetName);
    if (!sheet) {
        throw new Error(`–õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }

    const data = sheet.getDataRange().getValues();
    let firstRowIndex = -1;
    let lastRowIndex = -1;
    let vacancyCount = 0;

    // Scan for the user's first and last row indices
    for (let i = 1; i < data.length; i++) {
        if (String(data[i][0]) === String(chatId)) {
            if (firstRowIndex === -1) {
                firstRowIndex = i + 1; // First row where this chatId appears
            }
            lastRowIndex = i + 1; // Last row where this chatId appears
            
            // Read the latest Vacancy Num from column C (only from the first row)
            if (i + 1 === firstRowIndex && data[i][2] !== "" && !isNaN(data[i][2])) {
                vacancyCount = Number(data[i][2]);
            }
        }
    }

    if (appendType === "resume") {
          if (transcriptionText.trim() === "") {
          // If text is empty, delete the resume row
          if (firstRowIndex !== -1) {
            sheet.deleteRow(firstRowIndex);
            SpreadsheetApp.flush();
            Utilities.sleep(300);
          }
          return;
          }
        if (firstRowIndex !== -1) {
            // Update existing resume (column B) and last updated date (column C)
            Utilities.sleep(300);
            sheet.getRange(firstRowIndex, 2).setValue(transcriptionText);
            sheet.getRange(firstRowIndex, 3).setValue(new Date());
        } else {
            Utilities.sleep(300);
            // If no resume exists, create a new row
            sheet.appendRow([chatId, transcriptionText, new Date()]);
        }
    } else if (appendType === "vacancy") {
      // Fetch current data.
      const data = sheet.getDataRange().getValues();
      let firstRowIndex = null;
      let lastRowIndex = null;
      let count = 0;
      
      // Assuming row 1 is a header.
      for (let i = 1; i < data.length; i++) {
        if (String(data[i][0]) === String(chatId)) {
          if (firstRowIndex === null) firstRowIndex = i + 1;
          lastRowIndex = i + 1;
          count++;
        }
      }
      
      if (count === 0) {
        // No vacancy for this chatId; append to bottom.
        sheet.appendRow([chatId, transcriptionText, 1, new Date()]);
        SpreadsheetApp.flush();
        Utilities.sleep(300);
      } else {
        // Calculate new vacancy count.
        const newCount = count + 1;
        // Update only the first row of this chatId with the new count.
        sheet.getRange(firstRowIndex, 3).setValue(newCount);
        SpreadsheetApp.flush();
        Utilities.sleep(300);
        
        // Insert a row right after the last row for this chatId.
        sheet.insertRowAfter(lastRowIndex);
        SpreadsheetApp.flush();
        Utilities.sleep(300);
        
        // Populate the new row: leave the Vacancy Num blank.
        sheet.getRange(lastRowIndex + 1, 1, 1, 4).setValues([[chatId, transcriptionText, "", new Date()]]);
        SpreadsheetApp.flush();
        Utilities.sleep(300);
      }
    }

}


/**
 * –§—É–Ω–∫—Ü–∏—è registerUserIfNeeded(chatId)
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö "Vacancies" –∏ "Resumes".
 * –ï—Å–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–¥–Ω–æ–π –∏–∑ —Ç–∞–±–ª–∏—Ü, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
 * 
 * - –í "Vacancies": –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç chatId –≤ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü, 0 –≤ —Ç—Ä–µ—Ç–∏–π.
 * - –í "Resumes": –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç chatId –≤ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –±–µ–∑ 0 –≤ —Ç—Ä–µ—Ç—å–µ–º —Å—Ç–æ–ª–±—Ü–µ.
 *
 * @param {string|number} chatId ‚Äì –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
function registerUserIfNeeded(chatId) {
  const spreadsheet = SpreadsheetApp.openById(SHEET_ID);
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã "Vacancies"
  registerInSheet(spreadsheet, "Vacancies", chatId, true);
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã "Resumes"
  registerInSheet(spreadsheet, "Resumes", chatId, false);
}

/**
 * –§—É–Ω–∫—Ü–∏—è registerInSheet(sheet, sheetName, chatId, isVacancy)
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ chatId –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ª–∏—Å—Ç–µ. –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.
 *
 * @param {Spreadsheet} spreadsheet ‚Äì –û—Ç–∫—Ä—ã—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ Google Sheets.
 * @param {string} sheetName ‚Äì –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ ("Vacancies" –∏–ª–∏ "Resumes").
 * @param {string|number} chatId ‚Äì –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {boolean} isVacancy ‚Äì –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ "Vacancies".
 */
function registerInSheet(spreadsheet, sheetName, chatId, isVacancy) {
  const sheet = spreadsheet.getSheetByName(sheetName);
  
  if (!sheet) {
    throw new Error(`–õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.`);
  }

  const data = sheet.getDataRange().getValues();
  let found = false;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç chatId –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ
  for (let i = 1; i < data.length; i++) {
    if (String(data[i][0]) === String(chatId)) {
      found = true;
      break;
    }
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
  if (!found) {
    const newRow = isVacancy ? [chatId, "", 0] : [chatId, ""];
    sheet.appendRow(newRow);
  }
}


/**
 * –§—É–Ω–∫—Ü–∏—è showResume(chatId)
 * 
 * –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ RESUME_SHEET_NAME –ø–æ –µ–≥–æ chatId.
 * 
 * –õ–æ–≥–∏–∫–∞:
 * - –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ userId –≤ —Ç–∞–±–ª–∏—Ü–µ —Å –ø–æ–º–æ—â—å—é TextFinder.
 * - –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
 * - –ï—Å–ª–∏ —Ä–µ–∑—é–º–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
 * 
 * @param {string|number} chatId ‚Äì –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
 */
function showResume(chatId) {
  const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(RESUME_SHEET_NAME);
  if (!sheet) {
    Logger.log("–û—à–∏–±–∫–∞: –õ–∏—Å—Ç '" + RESUME_SHEET_NAME + "' –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    Bot.sendMessage({ chat_id: chatId, text: "–û—à–∏–±–∫–∞: –õ–∏—Å—Ç —Å —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω." });
    return;
  }

  // –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ userId –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
  const finder = sheet.createTextFinder(String(chatId));
  const cell = finder.findNext();

  if (cell && cell.getColumn() === 1) {
    const resumeText = sheet.getRange(cell.getRow(), 2).getValue();
    if (resumeText) {
      Bot.sendMessage({ chat_id: chatId, text: "–í–∞—à–µ —Ä–µ–∑—é–º–µ:\n" + resumeText });
    } else {
      Bot.sendMessage({ chat_id: chatId, text: "–í–∞—à–µ —Ä–µ–∑—é–º–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ." });
    }
  } else {
    Bot.sendMessage({ chat_id: chatId, text: "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ." });
  }
}


/**
 * –§—É–Ω–∫—Ü–∏—è FindMatches(vacancyText, userId)
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞—Ç–µ–º —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è GPT‚Äë4‚Äë32k,
 * –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –í –æ—Ç–≤–µ—Ç GPT –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å
 * —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "$userId1, userId2, ...$" –∏–ª–∏ "$$" –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.
 * –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É, —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É (–≤—Å–µ–≥–æ 2 –ø–æ–ø—ã—Ç–∫–∏).
 * –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö userId,
 * –ª–∏–±–æ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
 *
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
 * - –ü–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑—é–º–µ –∏–∑ Google Sheets.
 *   –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å —Å–æ–¥–µ—Ä–∂–∏—Ç chatId –∏ —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ. –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –ø—Ä–æ–º—Ç.
 * - –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –≤ –ª–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º—Ç –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GPT.
 * - –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ (Utilities.sleep), —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.
 *
 * @param {string} vacancyText ‚Äì –¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏.
 * @param {string|number} userId ‚Äì –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ).
 * @return {Array} ‚Äì –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö userId –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.
 */
function FindMatches(vacancyText, userId) {
  var attempt = 0;
  var maxAttempts = 2;
  var gptResponse = "";
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏–∑ –ª–∏—Å—Ç–∞ Google Sheets.
  // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ä–µ–∑—é–º–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ª–∏—Å—Ç–µ —Å –∏–º–µ–Ω–µ–º "Resumes" (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏).
  var resumeSheetName = "Resumes";
  var resumeSheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(resumeSheetName);
  var resumeData = resumeSheet.getDataRange().getValues();
  var resumeList = "–°–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ:\n";
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.
  for (var i = 1; i < resumeData.length; i++) {
    var rChatId = resumeData[i][0];
    var rText = resumeData[i][1];
    if (rChatId && rText) {
      resumeList += "ChatId " + rChatId + ": " + rText + "\n";
    }
  }
  
  while (attempt < maxAttempts) {
    var prompt = '–í—ã–±–µ—Ä–∏ –Ω–µ –±–æ–ª–µ–µ 5 —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: "' + vacancyText + '". ' +
                 '–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:\n' + resumeList + "\n" +
                 '–û—á–µ–Ω—å –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–æ–ª—å–∫–æ –∏—Ö userId —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –≤—Å–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: $userId1, userId2, ...$ ' +
                 '–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –º–µ–Ω—å—à–µ —á–µ–º 5 –ª—é–¥–µ–π. –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å –ø—Ä–æ—Å—Ç–æ $$ ' +
                 '–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ –≤ –æ—Ç–≤–µ—Ç.';
    
    //Logger.log("GPT prompt: " + prompt);
    
    gptResponse = callGPT(prompt).trim();
    
    //Logger.log("GPT response: " + gptResponse);
    
    Utilities.sleep(300);
    
    if (gptResponse === "$$") {
      return [];
    }

    if (gptResponse.startsWith("$") && gptResponse.endsWith("$")) {
      var content = gptResponse.substring(1, gptResponse.length - 1).trim();
      if (content === "") return [];
      
      // Correct parsing: Split by "," and trim each ID
      var ids = content.split(",").map(id => id.trim());
      
      // Ensure valid numeric IDs (if needed)
      var result = ids.filter(id => id.match(/^\d+$/));

      return result;
    }

    attempt++;
  }
  return [];
}


/**
 * –§—É–Ω–∫—Ü–∏—è printMatches(matchList)
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ userId, –¥–ª—è –∫–∞–∂–¥–æ–≥–æ:
 * - –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—é–º–µ –≤ –ª–∏—Å—Ç–µ, –∑–∞–¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π RESUME_SHEET_NAME, –ø–æ userId –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç.
 * - –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å username —á–µ—Ä–µ–∑ Telegram API (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞) –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ userId.
 * –ó–∞—Ç–µ–º —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
 *
 * "–≠—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –≤–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏:
 *  @<username>, <—Ä–µ–∑—é–º–µ>
 *  <userId> (—É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞), <—Ä–µ–∑—é–º–µ>
 *  ..."
 *
 * –ï—Å–ª–∏ —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è.
 * –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
 *
 * @param {Array} matchList ‚Äì –ú–∞—Å—Å–∏–≤ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ —Å–∏–º–≤–æ–ª–∞ "@").
 * @return {string} ‚Äì –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.
 */
function printMatches(matchList) {
  let resultStr = "–≠—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –≤–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏:\n";
  
  const spreadsheet = SpreadsheetApp.openById(SHEET_ID);
  const resumeSheet = spreadsheet.getSheetByName(RESUME_SHEET_NAME);
  
  if (!resumeSheet) {
    Logger.log("–û—à–∏–±–∫–∞: –õ–∏—Å—Ç " + RESUME_SHEET_NAME + " –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    return "–û—à–∏–±–∫–∞: –õ–∏—Å—Ç " + RESUME_SHEET_NAME + " –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.";
  }
  
  // –î–ª—è –∫–∞–∂–¥–æ–≥–æ userId –∏–∑ matchList
  for (let i = 0; i < matchList.length; i++) {
    const userId = String(matchList[i]);
    
    // –ü–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ –≤ –ª–∏—Å—Ç–µ "–†–µ–∑—é–º–µ" –ø–æ userId (–∏—â–µ–º –≤ –∫–æ–ª–æ–Ω–∫–µ 1, —Ä–µ–∑—é–º–µ –≤ –∫–æ–ª–æ–Ω–∫–µ 2)
    let resumeText = "";
    let resumeFinder = resumeSheet.createTextFinder(userId);
    let resumeCell = resumeFinder.findNext();
    if (resumeCell && resumeCell.getColumn() === 1) {
      resumeText = resumeSheet.getRange(resumeCell.getRow(), 2).getValue();
    }
    
    // –ï—Å–ª–∏ —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    if (!resumeText) continue;
    
    // –ü–æ–ª—É—á–∞–µ–º username —á–µ—Ä–µ–∑ Telegram API, –∞ –Ω–µ —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã.
    let username = getTelegramUsername(userId);
    
    const displayName = username ? `@${username}` : `${userId} (—É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞)`;
    resultStr += `${displayName}, ${resumeText}\n`;
  }
  
  if (resultStr === "–≠—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –≤–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏:\n") {
    resultStr += "–ù–∏ –æ–¥–∏–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.";
  }
  
  return resultStr;
}

/**
 * –§—É–Ω–∫—Ü–∏—è getTelegramUsername(userId)
 * –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞.
 * –ï—Å–ª–∏ username –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
 *
 * @param {string|number} userId ‚Äì –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
 * @return {string} ‚Äì username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.
 */
function getTelegramUsername(userId) {
  try {
    const url = "https://api.telegram.org/bot" + BOT_TOKEN + "/getChat?chat_id=" + userId;
    const response = UrlFetchApp.fetch(url);
    const json = JSON.parse(response.getContentText());
    if (json.ok && json.result && json.result.username) {
      return json.result.username;
    }
  } catch (e) {
    Logger.log("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è username –¥–ª—è userId " + userId + ": " + e.toString());
  }
  return "";
}

function sendToWhisper(blob, chatId) {
  Bot.sendMessage({
    chat_id: chatId,
    text: "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ –Ω–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É..."
  });

  try {
    const formData = {
      "model": "whisper-1",
      "file": blob
    };

    const options = {
      method: "post",
      muteHttpExceptions: true,
      payload: formData,
      headers: { "Authorization": "Bearer " + OPENAI_API_KEY }
    };

    const response = UrlFetchApp.fetch(OPENAI_WHISPER_URL, options);
    const code = response.getResponseCode();
    const respText = response.getContentText();

    if (code >= 200 && code < 300) {
      const json = JSON.parse(respText);
      const resultText = json.text || "";

      // –ë–æ—Ç –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      Bot.sendMessage({
        chat_id: chatId,
        text: `‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.\n\nüìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n${resultText}`
      });

      return resultText; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    } else {
      Bot.sendMessage({ chat_id: chatId, text: "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: " + respText });
      return null;
    }

  } catch (err) {
    Bot.sendMessage({ chat_id: chatId, text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ: " + err });
    return null;
  }
}


